name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black
    
    - name: Lint with flake8
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: black --check src/
    
    - name: Test with pytest
      run: |
        pytest --cov=src --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        # platforms: linux/amd64,linux/arm64  # Temporarily disabled to avoid costs
        platforms: linux/amd64
        # push: true  # Temporarily disabled to avoid registry costs
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Output image
      id: image
      run: |
        echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  # Temporarily disabled to avoid deployment costs
  # deploy-staging:
  #   if: github.ref == 'refs/heads/develop'
  #   needs: build
  #   runs-on: ubuntu-latest
  #   environment: staging
  #   
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v4
  #     with:
  #       token: ${{ secrets.GITHUB_TOKEN }}
  #   
  #   - name: Update staging manifests
  #     run: |
  #       sed -i "s|image: metricflow:latest|image: ${{ needs.build.outputs.image }}|g" k8s/app-deployment.yaml
  #       git config --local user.email "action@github.com"
  #       git config --local user.name "GitHub Action"
  #       git add k8s/app-deployment.yaml
  #       git commit -m "Update staging image to ${{ github.sha }}" || exit 0
  #       git push

  # deploy-production:
  #   if: github.ref == 'refs/heads/main'
  #   needs: build
  #   runs-on: ubuntu-latest
  #   environment: production
  #   
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v4
  #     with:
  #       token: ${{ secrets.GITHUB_TOKEN }}
  #   
  #   - name: Update production manifests
  #     run: |
  #       sed -i "s|image: metricflow:latest|image: ${{ needs.build.outputs.image }}|g" k8s/app-deployment.yaml
  #       git config --local user.email "action@github.com"
  #       git config --local user.name "GitHub Action"
  #       git add k8s/app-deployment.yaml
  #       git commit -m "Update production image to ${{ github.sha }}" || exit 0
  #       git push

  # Temporarily disabled to avoid notification costs
  # notify:
  #   if: always()
  #   needs: [test, security, build]
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #   - name: Notify deployment status
  #     uses: 8398a7/action-slack@v3
  #     if: always()
  #     with:
  #       status: ${{ job.status }}
  #       channel: '#deployments'
  #       webhook_url: ${{ secrets.SLACK_WEBHOOK }}
  #       fields: repo,message,commit,author,action,eventName,ref,workflow