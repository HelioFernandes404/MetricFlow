---
- name: Install Kubernetes components
  hosts: k8s_cluster
  become: yes
  tasks:
    - name: Disable swap
      shell: swapoff -a
      when: ansible_swaptotal_mb > 0

    - name: Remove swap from fstab
      lineinfile:
        path: /etc/fstab
        regexp: '\sswap\s'
        state: absent

    - name: Add Kubernetes GPG key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Add Kubernetes repository
      apt_repository:
        repo: "deb https://apt.kubernetes.io/ kubernetes-xenial main"
        state: present

    - name: Install Kubernetes packages
      apt:
        name:
          - kubelet=1.27.3-00
          - kubeadm=1.27.3-00
          - kubectl=1.27.3-00
        state: present
        update_cache: yes

    - name: Hold Kubernetes packages
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl

    - name: Configure kubelet
      lineinfile:
        path: /etc/default/kubelet
        line: 'KUBELET_EXTRA_ARGS="--cgroup-driver=systemd"'
        create: yes
      notify: restart kubelet

    - name: Enable kubelet
      systemd:
        name: kubelet
        enabled: yes

    - name: Configure kernel modules
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - br_netfilter
        - ip_vs
        - ip_vs_rr
        - ip_vs_wrr
        - ip_vs_sh

    - name: Load kernel modules at boot
      lineinfile:
        path: /etc/modules-load.d/k8s.conf
        line: "{{ item }}"
        create: yes
      loop:
        - br_netfilter
        - ip_vs
        - ip_vs_rr
        - ip_vs_wrr
        - ip_vs_sh

    - name: Configure sysctl
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      loop:
        - { name: 'net.bridge.bridge-nf-call-iptables', value: '1' }
        - { name: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
        - { name: 'net.ipv4.ip_forward', value: '1' }

  handlers:
    - name: restart kubelet
      systemd:
        name: kubelet
        state: restarted

- name: Initialize Kubernetes cluster
  hosts: control_plane[0]
  become: yes
  tasks:
    - name: Initialize the cluster
      shell: kubeadm init --pod-network-cidr=10.244.0.0/16 --control-plane-endpoint={{ hostvars[groups['control_plane'][0]]['ip'] }}:6443
      args:
        creates: /etc/kubernetes/admin.conf

    - name: Setup kubeconfig for root
      file:
        path: /root/.kube
        state: directory
        mode: '0755'

    - name: Copy admin.conf to kubeconfig
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        remote_src: yes

    - name: Setup kubeconfig for user
      file:
        path: "/home/{{ ansible_user }}/.kube"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Copy admin.conf to user kubeconfig
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "/home/{{ ansible_user }}/.kube/config"
        remote_src: yes
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Install Calico network plugin
      shell: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/calico.yaml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

- name: Join worker nodes
  hosts: worker_nodes
  become: yes
  tasks:
    - name: Get join command
      shell: kubeadm token create --print-join-command
      delegate_to: "{{ groups['control_plane'][0] }}"
      register: join_command

    - name: Join cluster
      shell: "{{ join_command.stdout }}"
      args:
        creates: /etc/kubernetes/kubelet.conf